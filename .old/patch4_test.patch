Index: orocos_kdl/src/chainjnttojacsolver.cpp
===================================================================
--- orocos_kdl/src/chainjnttojacsolver.cpp	(revision 34658)
+++ orocos_kdl/src/chainjnttojacsolver.cpp	(working copy)
@@ -23,9 +23,9 @@
 
 namespace KDL
 {
-    ChainJntToJacSolver::ChainJntToJacSolver(const Chain& _chain):
-        chain(_chain),locked_joints_(chain.getNrOfJoints(),false),
-        nr_of_unlocked_joints_(chain.getNrOfJoints())
+  ChainJntToJacSolver::ChainJntToJacSolver(const Chain& _chain):
+    chain(_chain),locked_joints_(chain.getLockedJoints()),
+    nr_of_unlocked_joints_(chain.getNrOfUnlockedJoints()),jac_tmp(chain.getNrOfUnlockedJoints())
     {
     }
 
@@ -43,12 +43,26 @@
             if(!locked_joints_[i])
                 nr_of_unlocked_joints_++;
         }
+	jac_tmp.resize(nr_of_unlocked_joints_);
+	return(0);
     }
 
-    int ChainJntToJacSolver::JntToJac(const JntArray& q_in,Jacobian& jac)
+    std::vector<bool> ChainJntToJacSolver::getLockedJoints()
     {
-        if(q_in.rows()!=chain.getNrOfJoints()||nr_of_unlocked_joints_!=jac.columns())
+      return(locked_joints_);
+    }
+
+    int ChainJntToJacSolver::JntToJac(const JntArray& q_in,Jacobian& jac,bool coupled)
+    {
+        int jac_columns;
+        if(coupled)
+	    jac_columns=chain.getNrOfIndJoints();
+	else
+	  jac_columns=nr_of_unlocked_joints_;
+        if(q_in.rows()!=chain.getNrOfJoints()||jac_columns!=jac.columns()) {
+	  //std::cout<<"incorrect jacobian size or qin size"<<std::endl;
             return -1;
+	}
         T_tmp = Frame::Identity();
         SetToZero(t_tmp);
         int j=0;
@@ -65,22 +79,25 @@
                     t_tmp = T_tmp.M*chain.getSegment(i).twist(q_in(j),1.0);
             }else{
                 total = T_tmp*chain.getSegment(i).pose(0.0);
-
             }
 
             //Changing Refpoint of all columns to new ee
-            changeRefPoint(jac,total.p-T_tmp.p,jac);
+            changeRefPoint(jac_tmp,total.p-T_tmp.p,jac_tmp);
 
             //Only increase jointnr if the segment has a joint
             if(chain.getSegment(i).getJoint().getType()!=Joint::None){
                 //Only put the twist inside if it is not locked
                 if(!locked_joints_[j])
-                    jac.setColumn(k++,t_tmp);
+		    jac_tmp.setColumn(k++,t_tmp);
                 j++;
             }
 
             T_tmp = total;
         }
+	if (coupled)
+	  jac.data=(jac_tmp.data*chain.cm).lazy();
+	else
+	  jac.data=jac_tmp.data;
         return 0;
     }
 }
